TOKEN    	LEXEME
Separator	[
Operator  	*
Operator  	*
Unknown  	This
Unknown  	
Separator	SPACE
Keyword  	function
Separator	SPACE
Unknown  	divides
Unknown  	
Separator	SPACE
Unknown  	and
Unknown  	
Separator	SPACE
Unknown  	multiples
Unknown  	
Separator	SPACE
Unknown  	numbers
Unknown  	
Separator	SPACE
Unknown  	by
Unknown  	
Separator	SPACE
Integer  	2
Integer  	
Separator	SPACE
Unknown  	and
Unknown  	
Separator	SPACE
Unknown  	checks
Unknown  	
Separator	SPACE
Keyword  	if
Separator	SPACE
Unknown  	a
Unknown  	
Separator	SPACE
Unknown  	number
Unknown  	
Separator	SPACE
Unknown  	is
Unknown  	
Separator	SPACE
Unknown  	equal
Unknown  	
Separator	SPACE
Unknown  	to
Unknown  	
Separator	SPACE
Unknown  	zero
Unknown  	
Operator  	*
Operator  	*
Separator	]
Unknown  	

function
Unknown  	
Separator	SPACE
Unknown  	division
Unknown  	
Separator	SPACE
Separator	(
Unknown  	num
Unknown  	
Separator	SPACE
Unknown  	integer
Unknown  	
Separator	)
Separator	{
Unknown  	

n0m
Unknown  	
Separator	SPACE
Operator  	=
Operator  	=
Separator	SPACE
Unknown  	num
Unknown  	
Separator	SPACE
Operator  	/
Operator  	/
Separator	SPACE
Real     	2.0
Real     	
Separator	;
Unknown  	
return
Unknown  	
Separator	SPACE
Unknown  	num

Unknown  	
Separator	}
Unknown  	

function
Unknown  	
Separator	SPACE
Unknown  	multiply
Unknown  	
Separator	SPACE
Separator	(
Unknown  	num
Unknown  	
Separator	SPACE
Unknown  	integer
Unknown  	
Separator	)
Separator	{
Unknown  	

num
Unknown  	
Separator	SPACE
Operator  	=
Operator  	=
Separator	SPACE
Unknown  	num
Unknown  	
Separator	SPACE
Operator  	*
Operator  	*
Separator	SPACE
Operator  	-
Operator  	-
Integer  	2
Integer  	
Separator	;
Unknown  	
return
Unknown  	
Separator	SPACE
Unknown  	num

Unknown  	
Separator	}
Unknown  	

@
integer
Unknown  	
Separator	SPACE
Unknown  	num1
Unknown  	
Separator	,
Separator	SPACE
Unknown  	num2
Unknown  	
Separator	;
Separator	(
Unknown  	
getnum1
Unknown  	
Separator	,
Separator	SPACE
Unknown  	num2
Unknown  	
Separator	)
Separator	;
Separator	(
Unknown  	
ifnum1
Unknown  	
Separator	SPACE
Operator  	=
Operator  	=
Operator  	==
Operator  	=
Operator  	=
Separator	SPACE
Integer  	0
Integer  	
Separator	)
Separator	{
Unknown  	

num1
Unknown  	
Separator	SPACE
Operator  	=
Operator  	=
Separator	SPACE
Separator	(
Unknown  	divisionnum1
Unknown  	
Separator	)
Separator	;
Unknown  	

Unknown  	
Separator	}
Unknown  	

num2
Unknown  	
Separator	SPACE
Operator  	=
Operator  	=
Separator	SPACE
Separator	(
Unknown  	multiplynum2
Unknown  	
Separator	)
Separator	;
